sorry rich but I still think we should talk about svelt's decision to leave typescript and why I think it was probably actually the right call svelte is one of the first early adopters of typescript especially outside of the tsjs file world where svelte has its own file syntax dots felt and they did a lot of hard work to make sure that inside of spelled files you still have type safety Rich deeply understands type safety in the importance of what it enables for you as a developer and how much more confidently you can move in building applications so much so that he even says it all the time he does not recommend building application code without typescript and type safety however that's not what we're talking about when we say svelt left typescript svelt still supports typescript you can still use typescript was felt in fact if you're using svelte you probably should typescript is a lot harder a burden for Library devs I have a video coming soon where I talk about tech that shifts the burden and I think typescript strength is how much it takes away from the application Dev in terms of worrying about consistency and reliability but also how much more of that burden gets shifted to the library author to make sure the typed contracts are correct such that anyone consuming the library will have a good time with autocomplete and won't break their application as well as the utter chaos around actually linking to and exporting the right types for the things you're building typescript is part of your library build step is obnoxious and it makes the developer experience painful we just open source the repo for upload thing and if you want to look through it you can see a bunch of the hacks we did just to make an npm package that uses typescript that has the correct type definitions but also can be used in Dev for us to iterate and experiment with it it was hard to do that right and it cost us a lot of time as well as Julius jumping in and helping us out typescript is a much much higher burden on Library authors than it is application devs period but is there another way can we get the type safety that we expect from a Library without having to write the whole thing in typescript and deal with the consequences of writing everything in typescript there is and although it has some gotchas it also has some benefits and it's really interesting to see svelte bet all in on JS doc typings JS Doc is a Syntax for leaving comments in your code that tell your IDE or an exported like Builder or doc step what each function what each variable what each thing does it's meant to be a way to write contracts between files and between packages is that are self-documenting and really handy if you look at the example Rich tweeted here you'll see that with traditional typescript when you give thing the type of thing it just tells you that but if you give it a JS doc comment instead you can write details for that with the typing and it's the co-location of a definition through a traditional comment and the type as part of the Syntax for it that makes the readability of this stuff much better and with upload thing we went pretty out of our way to try and do similar where even though we have all our type definitions done the traditional typescript way I also leave comments all over the stuff so that you can get good definitions when you consume it here where I put an example so now when you hover over the upload button you see an example of how to use it and then when you get a type error if you consume it incorrectly here and we like delete this we got a type error that says you forgot to pass the generic I'm like what's that mean hover over this oh there's the example I forgot to put this here I'll put that there and now it's good but we've had to do piles of hacks from both jsdoc as well as typescript where in order to get that working at all in order to get like the type error I had to lie to typescript a lot in particular up here I void out the type if you don't pass a router and return you forgot to pass the generic instead of the actual key but like that's a hack and there's a huge difference between this code and this code and although I I understand this code is like a complex generic and this code is just an example there is something to what rich said here around the JS doc syntax resulting in code that is better documented and consumable as well as being a little bit more readable and you're actually working on it and maintaining it but the key differentiator isn't just like the syntactical difference certainly isn't that at all it's that you don't need to build step anymore so you don't need something to convert this TSX file into a JS file that can then run in the browser if you have MJS or JS files that have happen to use the syntax that's just a comment it gets ignored by the browser which allows you to not have to build anything in order to use the stuff and you can still do type checks in your CI using the type definitions you put above these things if you use the syntax that he showed here where it's at type thing that's still type safe you'll still get errors if you try to assign it something you're not supposed to I can even demo this quick and now without writing typescript I have type safety this is a JS file that's typesafe I don't think we should use this in apps though because it's much harder to get a properly guaranteed type system but if your code base is a small number of files and a large amount of exports that people need to deeply understand and the number of files and change a lot that the contents of them do this model makes a lot of sense especially for library devs and as weird as it might be for me to me the typescript guy to sit here and say hey I think it makes sense they moved off of typescript I'm going to sit here and do it because it absolutely makes them more productive as they work in this code base and it's really nice to to see how much of a win they've already found from it this was a great tweet Matt made that I've the thing I've thought a lot about and haven't done a video on it's actually I have in my to do here it's just the bird and I mentioned I was going to do this later this is a video about how certain Technologies make developers work harder on the library side in order to make life easier for the application devs and that's why it's so cool to see people understand like these are very different I've written way more typescript over the last two months than I have in years because normally when I write apps in typescript I'm just writing JS but when I am deep in library land making packages I have to export for y'all to consume I'm writing a lot more typings and I'm writing a lot more chaos within those it's just a fundamental different world and Rich has decided to be the the change so to speak and be one of the first people to to push the idea of using type safety without using typescript by deeply embracing JS doc comments it theoretically will make working in their code base significant simpler and they've already made this change in svelt kit and really enjoyed it I trust rich in the team's judgment in moving svelte as well because they wouldn't have done this if it didn't work in svelte kit it's a bold move it's not what many have made yet but I do think we're going to see more Library authors taking advantage of JS Doc is the method of defining the typesafe contracts within their projects really proud of the work they're doing I'm so excited to see how people use this in the future and if using JS talk this way starts to become the norm huge shout out to the svelte team for being willing to Pioneer these things it's really cool to see if you all want to hear a little bit more about Rich's hot takes and also get my reactions to them I'm going to pin a video here where I react to his most recent talk so check that out if you haven't already thank you as always peace notes sorry rich but I still think we should talk about svelt's decision to leave typescript and why I think it was probably actually the right call svelte is one of the first early adopters of typescript especially outside of the tsjs file world where svelte has its own file syntax dots felt and they did a lot of hard work to make sure that inside of spelled files you still have type safety Rich deeply understands type safety in the importance of what it enables for you as a developer and how much more confidently you can move in building applications so much so that he even says it all the time he does not recommend building application code without typescript and type safety however that's not what we're talking about when we say svelt left typescript svelt still supports typescript you can still use typescript was felt in fact if you're using svelte you probably should typescript is a lot harder a burden for Library devs I have a video coming soon where I talk about tech that shifts the burden and I think typescript strength is how much it takes away from the application Dev in terms of worrying about consistency and reliability but also how much more of that burden gets shifted to the library author to make sure the typed contracts are correct such that anyone consuming the library will have a good time with autocomplete and won't break their application as well as the utter chaos around actually linking to and exporting the right types for the things you're building typescript is part of your library build step is obnoxious and it makes the developer experience painful we just open source the repo for upload thing and if you want to look through it you can see a bunch of the hacks we did just to make an npm package that uses typescript that has the correct type definitions but also can be used in Dev for us to iterate and experiment with it it was hard to do that right and it cost us a lot of time as well as Julius jumping in and helping us out typescript is a much much higher burden on Library authors than it is application devs period but is there another way can we get the type safety that we expect from a Library without having to write the whole thing in typescript and deal with the consequences of writing everything in typescript there is and although it has some gotchas it also has some benefits and it's really interesting to see svelte bet all in on JS doc typings JS Doc is a Syntax for leaving comments in your code that tell your IDE or an exported like Builder or doc step what each function what each variable what each thing does it's meant to be a way to write contracts between files and between packages is that are self-documenting and really handy if you look at the example Rich tweeted here you'll see that with traditional typescript when you give thing the type of thing it just tells you that but if you give it a JS doc comment instead you can write details for that with the typing and it's the co-location of a definition through a traditional comment and the type as part of the Syntax for it that makes the readability of this stuff much better and with upload thing we went pretty out of our way to try and do similar where even though we have all our type definitions done the traditional typescript way I also leave comments all over the stuff so that you can get good definitions when you consume it here where I put an example so now when you hover over the upload button you see an example of how to use it and then when you get a type error if you consume it incorrectly here and we like delete this we got a type error that says you forgot to pass the generic I'm like what's that mean hover over this oh there's the example I forgot to put this here I'll put that there and now it's good but we've had to do piles of hacks from both jsdoc as well as typescript where in order to get that working at all in order to get like the type error I had to lie to typescript a lot in particular up here I void out the type if you don't pass a router and return you forgot to pass the generic instead of the actual key but like that's a hack and there's a huge difference between this code and this code and although I I understand this code is like a complex generic and this code is just an example there is something to what rich said here around the JS doc syntax resulting in code that is better documented and consumable as well as being a little bit more readable and you're actually working on it and maintaining it but the key differentiator isn't just like the syntactical difference certainly isn't that at all it's that you don't need to build step anymore so you don't need something to convert this TSX file into a JS file that can then run in the browser if you have MJS or JS files that have happen to use the syntax that's just a comment it gets ignored by the browser which allows you to not have to build anything in order to use the stuff and you can still do type checks in your CI using the type definitions you put above these things if you use the syntax that he showed here where it's at type thing that's still type safe you'll still get errors if you try to assign it something you're not supposed to I can even demo this quick and now without writing typescript I have type safety this is a JS file that's typesafe I don't think we should use this in apps though because it's much harder to get a properly guaranteed type system but if your code base is a small number of files and a large amount of exports that people need to deeply understand and the number of files and change a lot that the contents of them do this model makes a lot of sense especially for library devs and as weird as it might be for me to me the typescript guy to sit here and say hey I think it makes sense they moved off of typescript I'm going to sit here and do it because it absolutely makes them more productive as they work in this code base and it's really nice to to see how much of a win they've already found from it this was a great tweet Matt made that I've the thing I've thought a lot about and haven't done a video on it's actually I have in my to do here it's just the bird and I mentioned I was going to do this later this is a video about how certain Technologies make developers work harder on the library side in order to make life easier for the application devs and that's why it's so cool to see people understand like these are very different I've written way more typescript over the last two months than I have in years because normally when I write apps in typescript I'm just writing JS but when I am deep in library land making packages I have to export for y'all to consume I'm writing a lot more typings and I'm writing a lot more chaos within those it's just a fundamental different world and Rich has decided to be the the change so to speak and be one of the first people to to push the idea of using type safety without using typescript by deeply embracing JS doc comments it theoretically will make working in their code base significant simpler and they've already made this change in svelt kit and really enjoyed it I trust rich in the team's judgment in moving svelte as well because they wouldn't have done this if it didn't work in svelte kit it's a bold move it's not what many have made yet but I do think we're going to see more Library authors taking advantage of JS Doc is the method of defining the typesafe contracts within their projects really proud of the work they're doing I'm so excited to see how people use this in the future and if using JS talk this way starts to become the norm huge shout out to the svelte team for being willing to Pioneer these things it's really cool to see if you all want to hear a little bit more about Rich's hot takes and also get my reactions to them I'm going to pin a video here where I react to his most recent talk so check that out if you haven't already thank you as always peace notes 